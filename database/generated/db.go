// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package generated

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createProjectStmt, err = db.PrepareContext(ctx, createProject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProject: %w", err)
	}
	if q.createSecretStmt, err = db.PrepareContext(ctx, createSecret); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSecret: %w", err)
	}
	if q.deleteAllSecretsInProjectsStmt, err = db.PrepareContext(ctx, deleteAllSecretsInProjects); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllSecretsInProjects: %w", err)
	}
	if q.deleteProjectStmt, err = db.PrepareContext(ctx, deleteProject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProject: %w", err)
	}
	if q.deleteSecretStmt, err = db.PrepareContext(ctx, deleteSecret); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSecret: %w", err)
	}
	if q.getAllProjectsStmt, err = db.PrepareContext(ctx, getAllProjects); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllProjects: %w", err)
	}
	if q.getAllSecretsStmt, err = db.PrepareContext(ctx, getAllSecrets); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllSecrets: %w", err)
	}
	if q.getProjectByIDStmt, err = db.PrepareContext(ctx, getProjectByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectByID: %w", err)
	}
	if q.getSecretByIDStmt, err = db.PrepareContext(ctx, getSecretByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSecretByID: %w", err)
	}
	if q.getSecretsByProjectIDStmt, err = db.PrepareContext(ctx, getSecretsByProjectID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSecretsByProjectID: %w", err)
	}
	if q.updateProjectStmt, err = db.PrepareContext(ctx, updateProject); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProject: %w", err)
	}
	if q.updateSecretStmt, err = db.PrepareContext(ctx, updateSecret); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSecret: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createProjectStmt != nil {
		if cerr := q.createProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProjectStmt: %w", cerr)
		}
	}
	if q.createSecretStmt != nil {
		if cerr := q.createSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSecretStmt: %w", cerr)
		}
	}
	if q.deleteAllSecretsInProjectsStmt != nil {
		if cerr := q.deleteAllSecretsInProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllSecretsInProjectsStmt: %w", cerr)
		}
	}
	if q.deleteProjectStmt != nil {
		if cerr := q.deleteProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectStmt: %w", cerr)
		}
	}
	if q.deleteSecretStmt != nil {
		if cerr := q.deleteSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSecretStmt: %w", cerr)
		}
	}
	if q.getAllProjectsStmt != nil {
		if cerr := q.getAllProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllProjectsStmt: %w", cerr)
		}
	}
	if q.getAllSecretsStmt != nil {
		if cerr := q.getAllSecretsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllSecretsStmt: %w", cerr)
		}
	}
	if q.getProjectByIDStmt != nil {
		if cerr := q.getProjectByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectByIDStmt: %w", cerr)
		}
	}
	if q.getSecretByIDStmt != nil {
		if cerr := q.getSecretByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSecretByIDStmt: %w", cerr)
		}
	}
	if q.getSecretsByProjectIDStmt != nil {
		if cerr := q.getSecretsByProjectIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSecretsByProjectIDStmt: %w", cerr)
		}
	}
	if q.updateProjectStmt != nil {
		if cerr := q.updateProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProjectStmt: %w", cerr)
		}
	}
	if q.updateSecretStmt != nil {
		if cerr := q.updateSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSecretStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createProjectStmt              *sql.Stmt
	createSecretStmt               *sql.Stmt
	deleteAllSecretsInProjectsStmt *sql.Stmt
	deleteProjectStmt              *sql.Stmt
	deleteSecretStmt               *sql.Stmt
	getAllProjectsStmt             *sql.Stmt
	getAllSecretsStmt              *sql.Stmt
	getProjectByIDStmt             *sql.Stmt
	getSecretByIDStmt              *sql.Stmt
	getSecretsByProjectIDStmt      *sql.Stmt
	updateProjectStmt              *sql.Stmt
	updateSecretStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createProjectStmt:              q.createProjectStmt,
		createSecretStmt:               q.createSecretStmt,
		deleteAllSecretsInProjectsStmt: q.deleteAllSecretsInProjectsStmt,
		deleteProjectStmt:              q.deleteProjectStmt,
		deleteSecretStmt:               q.deleteSecretStmt,
		getAllProjectsStmt:             q.getAllProjectsStmt,
		getAllSecretsStmt:              q.getAllSecretsStmt,
		getProjectByIDStmt:             q.getProjectByIDStmt,
		getSecretByIDStmt:              q.getSecretByIDStmt,
		getSecretsByProjectIDStmt:      q.getSecretsByProjectIDStmt,
		updateProjectStmt:              q.updateProjectStmt,
		updateSecretStmt:               q.updateSecretStmt,
	}
}
