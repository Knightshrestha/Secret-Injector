// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package generated

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO
    project_list (id, name, description)
VALUES
    (
        ?1,
        ?2,
        ?3
    ) RETURNING id, name, description, created_at, updated_at
`

type CreateProjectParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (ProjectList, error) {
	row := q.queryRow(ctx, q.createProjectStmt, createProject, arg.ID, arg.Name, arg.Description)
	var i ProjectList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM project_list
WHERE
    id = ?1
`

func (q *Queries) DeleteProject(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteProjectStmt, deleteProject, id)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT
    id, name, description, created_at, updated_at
FROM
    project_list
`

func (q *Queries) GetAllProjects(ctx context.Context) ([]ProjectList, error) {
	rows, err := q.query(ctx, q.getAllProjectsStmt, getAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectList
	for rows.Next() {
		var i ProjectList
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, name, description, created_at, updated_at
FROM
    project_list
WHERE
    id = ?1
`

func (q *Queries) GetProjectByID(ctx context.Context, id string) (ProjectList, error) {
	row := q.queryRow(ctx, q.getProjectByIDStmt, getProjectByID, id)
	var i ProjectList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE project_list
SET
    name = COALESCE(?1, name),
    description = COALESCE(?2, description),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?3 RETURNING id, name, description, created_at, updated_at
`

type UpdateProjectParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	ID          string  `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (ProjectList, error) {
	row := q.queryRow(ctx, q.updateProjectStmt, updateProject, arg.Name, arg.Description, arg.ID)
	var i ProjectList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
