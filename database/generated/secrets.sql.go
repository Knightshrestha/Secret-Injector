// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: secrets.sql

package generated

import (
	"context"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO
    secret_list (id, project_id, key, value, description)
VALUES
    (
        ?1,
        ?2,
        ?3,
        ?4,
        ?5
    ) RETURNING id, project_id, "key", value, description, created_at, updated_at
`

type CreateSecretParams struct {
	ID          string  `json:"id"`
	ProjectID   string  `json:"project_id"`
	Key         string  `json:"key"`
	Value       string  `json:"value"`
	Description *string `json:"description"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (SecretList, error) {
	row := q.queryRow(ctx, q.createSecretStmt, createSecret,
		arg.ID,
		arg.ProjectID,
		arg.Key,
		arg.Value,
		arg.Description,
	)
	var i SecretList
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllSecretsInProjects = `-- name: DeleteAllSecretsInProjects :exec
DELETE FROM secret_list
WHERE
    project_id = ?1
`

func (q *Queries) DeleteAllSecretsInProjects(ctx context.Context, projectID string) error {
	_, err := q.exec(ctx, q.deleteAllSecretsInProjectsStmt, deleteAllSecretsInProjects, projectID)
	return err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secret_list
WHERE
    id = ?1
`

func (q *Queries) DeleteSecret(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteSecretStmt, deleteSecret, id)
	return err
}

const getAllSecrets = `-- name: GetAllSecrets :many
SELECT
    id, project_id, "key", value, description, created_at, updated_at
FROM
    secret_list
`

func (q *Queries) GetAllSecrets(ctx context.Context) ([]SecretList, error) {
	rows, err := q.query(ctx, q.getAllSecretsStmt, getAllSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretList
	for rows.Next() {
		var i SecretList
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Key,
			&i.Value,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecretByID = `-- name: GetSecretByID :one
SELECT
    id, project_id, "key", value, description, created_at, updated_at
FROM
    secret_list
WHERE
    id = ?1
`

func (q *Queries) GetSecretByID(ctx context.Context, id string) (SecretList, error) {
	row := q.queryRow(ctx, q.getSecretByIDStmt, getSecretByID, id)
	var i SecretList
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSecretsByProjectID = `-- name: GetSecretsByProjectID :many
SELECT
    id, project_id, "key", value, description, created_at, updated_at
FROM
    secret_list
WHERE
    project_id = ?1
`

func (q *Queries) GetSecretsByProjectID(ctx context.Context, projectID string) ([]SecretList, error) {
	rows, err := q.query(ctx, q.getSecretsByProjectIDStmt, getSecretsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretList
	for rows.Next() {
		var i SecretList
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Key,
			&i.Value,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secret_list
SET
    key = COALESCE(?1, key),
    description = COALESCE(?2, description),
    value = COALESCE(?3, value),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?4 RETURNING id, project_id, "key", value, description, created_at, updated_at
`

type UpdateSecretParams struct {
	Key         *string `json:"key"`
	Description *string `json:"description"`
	Value       *string `json:"value"`
	ID          string  `json:"id"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (SecretList, error) {
	row := q.queryRow(ctx, q.updateSecretStmt, updateSecret,
		arg.Key,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	var i SecretList
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
